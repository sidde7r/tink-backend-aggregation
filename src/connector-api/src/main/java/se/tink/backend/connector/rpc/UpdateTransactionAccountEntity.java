package se.tink.backend.connector.rpc;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.google.common.collect.Maps;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import se.tink.libraries.http.annotations.validation.ListNotNullOrEmpty;
import se.tink.libraries.http.annotations.validation.NoNullElements;

/**
 * This class is API compatible with CreateTransactionAccountEntity but is used for synchronous updates where we
 * take in exactly one account and one transaction to update rather than allowing any number.
 */
@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
public class UpdateTransactionAccountEntity implements TransactionAccountEntity {

    @ApiModelProperty(value = "The balance of the account for the time of the last transaction in the list.", example = "7000.0", required = true)
    private Double balance;

    @ApiModelProperty(value = "The reserved amount of the account for the time of the last transaction in the list.", example = "2000.0", required = false)
    private Double reservedAmount;

    @ApiModelProperty(value = "Persistent identifier for the account the transaction belongs to. Either this or tinkId must be set.", example = "2d3bd65493b549e1927d97a2d0683ab9")
    private String externalId = null;

    @ApiModelProperty(value = "Persistent identifier for the account the transaction belongs to generated by Tink. Either this or externalId must be set.", example = "e4a47d5e3d514ca4bd22130bb43c640b")
    private String tinkId = null;

    @ApiModelProperty(value = "The payload property can include arbitrary metadata provided by the financial institution in question that can be used either for deep-linking back to the app of the financial institution, for displaying additional information about the account, or for backend purposes such as automatic categorization improvement, etc. The format is key-value, where key is a String and value any object.", required = false, example = "{}")
    private Map<String, Object> payload;

    @ListNotNullOrEmpty
    @NoNullElements
    @Valid
    @ApiModelProperty(value = "The list of transactions to update.", required = true)
    private List<CreateTransactionEntity> transactions;

    @AssertTrue(message = "Either tinkId or externalId must be specified.")
    private boolean isTinkIdOrExternalIdSet() {
        return tinkId != null || externalId != null;
    }

    @AssertTrue(message = "Found both externalId and tinkId. Only one may be used.")
    private boolean isTinkIdExclusiveOrExternalId() {
        return tinkId != null ^ externalId != null;
    }

    @AssertTrue(message = "Transactions must contain exactly one element.")
    private boolean isOneElementOnlyInTransactions() {
        return transactions.size() == 1;
    }

    public Double getBalance() {
        return balance;
    }

    public Double getReservedAmount() {
        return reservedAmount;
    }

    public String getExternalId() {
        return externalId;
    }

    public String getTinkId() {
        return tinkId;
    }

    public List<CreateTransactionEntity> getTransactions() {
        return transactions;
    }

    public Map<String, Object> getPayload() {
        return payload == null ? Maps.newHashMap() : payload;
    }

    public void setBalance(Double balance) {
        this.balance = balance;
    }

    public void setReservedAmount(Double reservedAmount) {
        this.reservedAmount = reservedAmount;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    public void setTinkId(String tinkId) {
        this.tinkId = tinkId;
    }

    public void setPayload(Map<String, Object> payload) {
        this.payload = payload;
    }

    public void setTransactions(List<CreateTransactionEntity> transactions) {
        this.transactions = transactions;
    }
}
