package se.tink.backend.aggregation.agents.utils.authentication.vasco.digipass;

import org.junit.Assert;
import org.junit.Test;
import se.tink.backend.aggregation.agents.utils.encoding.EncodingUtils;

public class DigipassV2Test {
    // The following values named `_A` are taken from this recording:
    // https://integration-proxy.global-production.tink.network/analyze?query=filename%3A%22fi_op%20bank_28.0.1_reg_login_full_hashlogs%22
    private static final String FINGERPRINT_A =
            "D95EC4F17CAC14B85960A8926F6777A7CA04B8DE8AFBFB74435A936827FADC3E";
    private static final String STATIC_VECTOR_A =

    private static final String DYNAMIC_VECTOR_A =
            "00005FDF47AA6B0000000000000000004D01F2BD471260C4201A7126BADF62726786D8FB49E2D82D6CB051E572088035641ACFB6DA59";
    private static final String ACTIVATION_MESSAGE2_A =
            "00415FDF47AA6B7725E17B2ACA71CFB4E52935018A07C11E0213995BE9F6CC7A7A81C45B594223A0F4394DC8C1891F4CC1C06F351E6BA86251D526F3B233";

    // The name of this one is FI OP bank specific.
    private static final String APPLICATION_INSTANCE_ID_A = "2b6d7704-4509-4b9d-a4c4-e1d239426074";

    private static final String STATIC_VECTOR_B =
            "380802A5010346444D0210CCC82A9FFACC98897B7988CA382C34680301010401040501090601010701000801030901040A01010B01000C01010E01010F01011001013801033C01014601064701011135120100130101140101150C4348414C4C524553502020201601011704018374D01801011901102101102901102A01002B01002C0102115F120100130101140102150C5349474E494E472020202020160101170401DD74D01801081901101A01001B01001C01001D01001E01001F01002001002101102201102301102401102501102601102701102801102901102A01002B01002C01021147120100130101140103150C5345434348414E20202020201601011704018314D01801041901101A01101B01101C01102101102201102301102401102901102A01002B01002C0102112F120100130101140104150C524553504F4E53452020202016010117044080F0021801002901062A01002B01002C01023D35120100130101140101150C454E524F4C4C4D454E5420201601011704018314D01801011901102101102901052A01002B01002C0102";

    @Test
    public void testCalculateDeviceCode() {
        DigipassV2 digipassV2 = new DigipassV2(false, false);
        digipassV2.setFingerPrint(FINGERPRINT_A);
        digipassV2.setDynamicAndStaticVectors(DYNAMIC_VECTOR_A, STATIC_VECTOR_A);

        String deviceCode = digipassV2.calculateDeviceCode();
        Assert.assertEquals("DeviceCode is invalid.", "56375105970", deviceCode);
    }

    @Test
    public void testCalculateDeviceRegistrationSignature() {
        DigipassV2 digipassV2 = new DigipassV2(false, false);
        digipassV2.setFingerPrint(FINGERPRINT_A);
        digipassV2.setDynamicAndStaticVectors(DYNAMIC_VECTOR_A, STATIC_VECTOR_A);
        digipassV2.setActivationMessage2(ACTIVATION_MESSAGE2_A);

        String signature = digipassV2.calculateOtp(ACTIVATION_MESSAGE2_A);
        Assert.assertEquals("OTP is invalid.", "1710623801669075", signature);
    }

    @Test
    public void testCalculateLoginOtp() {
        DigipassV2 digipassV2 = new DigipassV2(false, false);
        digipassV2.setFingerPrint(FINGERPRINT_A);
        digipassV2.setDynamicAndStaticVectors(DYNAMIC_VECTOR_A, STATIC_VECTOR_A);
        digipassV2.setActivationMessage2(ACTIVATION_MESSAGE2_A);

        String secureChannelMessage =
                "00C15FDF47AA6BCE8B92449364028CF74C79C4C68B67CC52525E1A4C8D65FE1B7863828F16AF4FCD47B841A1D3C3A424C873CB926E5CF9A209B80DA13CE1E89C130AFBC153463D8D345352D359C26BE551CF1366A434F0323BE816B01DBDB65B3794C9C643C23BD632A686F0D91EADBCD51BDD18A236552D22595933206E4AA08510B8179CC9B8B2C7713CDFED05587185B75329F32F9DEF86488CD771ACA1001B85A040EDB8B7A015730D";

        String otp = digipassV2.calculateOtp(secureChannelMessage);
        Assert.assertEquals("OTP is invalid.", "8645363554125339", otp);
    }

    @Test(expected = IllegalStateException.class)
    public void testInvalidDigipass() {
        DigipassV2 digipassV2 = new DigipassV2(false, false);

        digipassV2.setDynamicAndStaticVectors(DYNAMIC_VECTOR_A, STATIC_VECTOR_B);
    }

    @Test
    public void testSecureChannelInformationMessage() {
        DigipassV2 digipassV2 = new DigipassV2(false, false);
        digipassV2.setFingerPrint(FINGERPRINT_A);
        digipassV2.setDynamicAndStaticVectors(DYNAMIC_VECTOR_A, STATIC_VECTOR_A);
        digipassV2.setActivationMessage2(ACTIVATION_MESSAGE2_A);

        // This is normally randomly generated, but in order to test we must hardcode it.
        byte[] counterNonce = EncodingUtils.decodeHexString("FA901FE86B2AFA9C");

        String message =
                digipassV2.createSecureChannelInformationMessage(
                        APPLICATION_INSTANCE_ID_A, counterNonce);
        String expectedMessage =
                "09015fdf47aa6bfa901fe86b2afa9c4e6d92122b5fce39ed71445afccc29addac60cdde36cdfb5129a05277cfbf6999811fd339165df344ad66fd0";
        Assert.assertEquals(
                "Secure channel information message is invalid.", expectedMessage, message);
    }

    @Test
    public void serializationTest() {
        DigipassV2 a = new DigipassV2(false, false);
        a.setFingerPrint(FINGERPRINT_A);
        a.setDynamicAndStaticVectors(DYNAMIC_VECTOR_A, STATIC_VECTOR_A);
        a.setActivationMessage2(ACTIVATION_MESSAGE2_A);

        String as = a.serialize();

        DigipassV2 b = new DigipassV2(false, false);
        b.deserialize(as);
        String bs = b.serialize();

        System.out.println(bs);

        Assert.assertEquals("Serialization/Deserialization failed.", as, bs);
    }
}
