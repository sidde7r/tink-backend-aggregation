package se.tink.backend.aggregation.eidasidentity;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

import java.util.Optional;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import se.tink.backend.integration.tpp_secrets_service.client.ManagedTppSecretsServiceClient;
import se.tink.backend.integration.tpp_secrets_service.client.entities.SecretsEntityCore;
import se.tink.backend.integration.tpp_secrets_service.client.entities.SecretsEntityCore.Builder;
import se.tink.libraries.unleash.UnleashClient;

@RunWith(MockitoJUnitRunner.class)
public class CertificateIdProviderTest {
    private static final String APP_ID = "appId";
    private static final String CLUSTER_ID = "clusterId";
    private static final String PROVIDER_NAME = "providerName";
    private static final String MARKET_CODE = "IT";
    private static final String QWAC =
            "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUlzekNDQnB1Z0F3SUJBZ0lRZUZrY2xSdVoyZE9BbXRnR2IyYkc5ekFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKcURFTE1Ba0dBMVVFQmhNQ1VGUXhRakJBQmdOVkJBb01PVTFWVEZSSlEwVlNWQ0F0SUZObGNuWnB3NmR2Y3lCawpaU0JEWlhKMGFXWnBZMkhEcDhPamJ5QkZiR1ZqZEhMRHMyNXBZMkVnVXk1QkxqRWdNQjRHQTFVRUN3d1hRMlZ5CmRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hNekF4QmdOVkJBTU1LazFWVEZSSlEwVlNWQ0JSVjBGRElFTmwKY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNUlEQXdOVEFlRncweU1UQTBNVEl4TkRFd01UaGFGdzB5TXpBMApNVEl5TXpVNU5UbGFNSUg1TVFzd0NRWURWUVFHRXdKVFJURVNNQkFHQTFVRUJ3d0pVM1J2WTJ0b2IyeHRNUkF3CkRnWURWUVFLREFkVWFXNXJJRUZDTVJrd0Z3WURWUVJoREJCUVUwUlRSUzFHU1U1QkxUUTBNRFU1TVM0d0xBWUQKVlFRTERDVlFVMFF5SUZGMVlXeHBabWxsWkNCWFpXSnphWFJsSUVGMWRHaGxiblJwWTJGMGFXOXVNUnN3R1FZRApWUVFGRXhKV1FWUlRSUzAxTlRZNE9UZ3lNVGt5TURFeEtEQW1CZ05WQkFNTUgyRm5aM0psWjJGMGFXOXVMbkJ5CmIyUjFZM1JwYjI0dWRHbHVheTVqYjIweEhUQWJCZ05WQkE4TUZGQnlhWFpoZEdVZ1QzSm5ZVzVwZW1GMGFXOXUKTVJNd0VRWUxLd1lCQkFHQ056d0NBUU1UQWxORk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQgpDZ0tDQVFFQXlNWDZJRUZQMURJdXNVaW5wazVPQzBXRjZyWHNHY01yeHMrYUExbFdJdU9tYTY2RmlMeVZFeUI2Ci9ncTY1TEZPRkpJQVRza2J1TXhsZEprQnF0WGpBOWxJZFdvdjFmSFJsdDJlbHR4WGNCMnhRQ3ZUSzJxM1YrQUUKNzl2RzlSNUo0TEExUmdNSXE2NkVSY1VWb3RvZS9mRE1LMnNmVDZKQlV1blNJcDA2ajNTUk42SElJdDhLSDFuYwpuclNXVlo0cSsza1NhV2hFYi9WZVFvWkdqdkFlVFgzeEZFUU00S25RL3BlTkE5dnYrSWEvNlIyRi96ck5LTCtyCm5ENlNoWmNDZkpNQ20vajUvU2gzc1JkOUVvL2phaGJJVnBhcWorSUF3V2lIa3paOCtwL0p4eVUxQXhYM1VXRk0Kdm9HUEFnZVJseE81MTRHNFFseEZRSjh3NUJ0RXlRSURBUUFCbzRJRGhEQ0NBNEF3REFZRFZSMFRBUUgvQkFJdwpBREFmQmdOVkhTTUVHREFXZ0JSV1I3Q1prZjl1dUUxZ3pYVWo4ZVcxMStaeXF6QjBCZ2dyQmdFRkJRY0JBUVJvCk1HWXdPQVlJS3dZQkJRVUhNQUtHTEdoMGRIQTZMeTl3YTJrdWJYVnNkR2xqWlhKMExtTnZiUzlqWlhKMEwzRjMKWVdOZlkyRXdNRFV1WTJWeU1Db0dDQ3NHQVFVRkJ6QUJoaDVvZEhSd09pOHZiMk56Y0M1dGRXeDBhV05sY25RdQpZMjl0TDI5amMzQXdRd1lEVlIwdUJEd3dPakE0b0RhZ05JWXlhSFIwY0RvdkwzQnJhUzV0ZFd4MGFXTmxjblF1ClkyOXRMMk55YkM5amNteGZjWGRoWXpBd05WOWtaV3gwWVM1amNtd3dLZ1lEVlIwUkJDTXdJWUlmWVdkbmNtVm4KWVhScGIyNHVjSEp2WkhWamRHbHZiaTUwYVc1ckxtTnZiVEJoQmdOVkhTQUVXakJZTUFrR0J3UUFpK3hBQVFRdwpFUVlQS3dZQkJBR0J3MjRCQVFFQkFBRU1NRGdHRFNzR0FRUUJnY051QVFFQkFBY3dKekFsQmdnckJnRUZCUWNDCkFSWVphSFIwY0hNNkx5OXdhMmt1YlhWc2RHbGpaWEowTG1OdmJUQWdCZ1ZuZ1F3REFRUVhNQlVUQTFCVFJCTUMKVTBVTUNrWkpUa0V0TkRRd05Ua3dIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUlJQgpWQVlJS3dZQkJRVUhBUU1FZ2dGR01JSUJRakFLQmdnckJnRUZCUWNMQWpBSUJnWUVBSTVHQVFFd0N3WUdCQUNPClJnRURBZ0VITUJNR0JnUUFqa1lCQmpBSkJnY0VBSTVHQVFZRE1JR2hCZ1lFQUk1R0FRVXdnWll3U1JaRGFIUjAKY0hNNkx5OXdhMmt1YlhWc2RHbGpaWEowTG1OdmJTOXdiMnd2WTNCekwwMVZURlJKUTBWU1ZGOVFTaTVEUVROZgpNalF1TVY4d01EQXhYMlZ1TG5Ca1poTUNaVzR3U1JaRGFIUjBjSE02THk5d2Eya3ViWFZzZEdsalpYSjBMbU52CmJTOXdiMnd2WTNCekwwMVZURlJKUTBWU1ZGOVFTaTVEUVROZk1qUXVNVjh3TURBeFgzQjBMbkJrWmhNQ2NIUXcKWkFZR0JBQ0JtQ2NDTUZvd0pqQVJCZ2NFQUlHWUp3RUNEQVpRVTFCZlVFa3dFUVlIQkFDQm1DY0JBd3dHVUZOUQpYMEZKRENkVGQyVmthWE5vSUVacGJtRnVZMmxoYkNCVGRYQmxjblpwYzJsdmJpQkJkWFJvYjNKcGRIa01CMU5GCkxVWkpUa0V3UFFZRFZSMGZCRFl3TkRBeW9EQ2dMb1lzYUhSMGNEb3ZMM0JyYVM1dGRXeDBhV05sY25RdVkyOXQKTDJOeWJDOWpjbXhmY1hkaFl6QXdOUzVqY213d0hRWURWUjBPQkJZRUZBeUpXaWhjSnZjK3VFMkx3ZldFVmd5cQpDbFNGTUE0R0ExVWREd0VCL3dRRUF3SUZvREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBV2tpTGUvSzRLOXc3CkxmSUZVektwaDhNcm5LYUlJdnU0ekQ2d2pTWXFaS3FEVFFsM3FDQm5pc21CWjVjMkV3M0ZTM2RwWGZyQUFoQUwKemlMUFAycFlYWXNtVSs0WkdOQlRXY3RZRVZuMm1LYVFLOGRURlFwNTdqS3hPZGZOR2dQaU5SaExrVXBkQXQ2dQpWUE9sRzZiVXFrV2xYaStEc0pvdXNESEJJV2ZlUGJhTXB4OE8xK1Z6R1Z6RWVqdjdUZWdwTHIva1R3RnpZcUgxCjQ1KzVKdEUvTExHbU54c3pVeHM4WVFXbm5FbHNjUk1LOXFFT0JNSDVsZ0tjM0ZXdXlCeXVKRXY0cG9nemlPa0cKMkx4OFlTaGdva3lINjNwc1NBZUcra1lqL1pwL240K3BRSWNGa2d5cEtscnV6NXhmdXNMSitMWVJVU2ZaRzhYbApORUd2NlNOVVc4RGpCdEtDeS81V240b2NSY0d0dGFtTWlySVJqbnBhbmJka2NHNlFoZC94TVY0OGRhN2FUWmNqCkxLci90amh4b1NtekNHV0pLVFFhODFjd2NSanBsT1FGVENUMFNVT0VPYmFocVVMcEhQWWlxYXluSmdDcnZiT1kKOEVHc05waUlEa2NrbDlvQkx0YXNxUmRzSm50V3ZZajZqOUVDMlhDMTFCRkliNzhZL0U3TzdrT3RpOEsxS3RrMgpoRVlGaTZEZ0k1TUswNzROSDA3M3lDODF2SlFuRWF4WGNWNGdjUC9PU3hMSzBscFBUVGthTTFUdG5YRDhyQklZClgwaUh4N3dmamh3S3Fjd0JqdGRZcmdmMk5udmdYREZpc1FCN3NoMzRkZEFrNCt3WEpoNWFKWXA2elhQSTh1MEkKWTZ3bFFKSGhoNFR3OGE5MXVhSWEvenRxYm1pVjdsUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoKLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUhRVENDQlNtZ0F3SUJBZ0lRVnBLclNNVGNEVlVPMU1VVEtwWHJ5VEFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKaFRFTE1Ba0dBMVVFQmhNQ1VGUXhRakJBQmdOVkJBb01PVTFWVEZSSlEwVlNWQ0F0SUZObGNuWnB3NmR2Y3lCawpaU0JEWlhKMGFXWnBZMkhEcDhPamJ5QkZiR1ZqZEhMRHMyNXBZMkVnVXk1QkxqRXlNREFHQTFVRUF3d3BUVlZNClZFbERSVkpVSUZKdmIzUWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrZ01ERXdIaGNOTVRreE1qQTUKTVRnek5UUTRXaGNOTXpJd05qQTRNVGd6TlRRNFdqQ0JxREVMTUFrR0ExVUVCaE1DVUZReFFqQkFCZ05WQkFvTQpPVTFWVEZSSlEwVlNWQ0F0SUZObGNuWnB3NmR2Y3lCa1pTQkRaWEowYVdacFkySERwOE9qYnlCRmJHVmpkSExECnMyNXBZMkVnVXk1QkxqRWdNQjRHQTFVRUN3d1hRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhreE16QXgKQmdOVkJBTU1LazFWVEZSSlEwVlNWQ0JSVjBGRElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SURBdwpOVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMbmNzbU96em5XTXVRaDBUZ25iCjh5Y0VoOUxlcEVPRWMwRlF1ZEZoQ2lmc3J2U21uSkRQK25raVI2N0NtOVdUY2ZZWFpMSWF6UkpCdy9RRzRPNDUKd0Y2cTBQaEMzb1F1SmJ4MzI1bkw2WVBQRlBiTVMyRWU1MVU0VFd3SThRVXIrT0F4ZEhLWTFtblJCeWZMazl1UwoyWXNtRlp5WTAwRHF3QjBHWmFnUTg1LzN5ZTNyNVdKYloxNE96T2liT24weFVSR2RuM1RrUlBUYWNMSEZ3TCtLCm5zRkxuMS9HVmlTUTV4cndDdXIwNlpPcXc3TmhXVXZiSVdxZ3RYVFNyUTh1ZVNsczBFN0NBYzBGQkE2ekE4eTcKdTVuQ1NsYUkrbjRmOCtoWnBQeU14WUhJazYxaFA3MzFoTHkxeFlOL3JoZjI3bUNJS0U2Z2xkdS9UV0Nsb2ZmQgp6eXZ6a0c0bkhmdFhTWjRRUEpyQU13K0cxVEFsRDFBSm52NllLRUs1MFBKTlZPMitwcVh6L3UyQ1hjOUlaUnFHCjZRT2tLL3kxWjN6K2pJWkY3MnZTRzlqeDZZaXZqcnM1TnZnRHhZTEVHL3BBaTlYUzY3WmlDdWtUY3c0VHRFNVYKc3d4NjQrb25TTWllUG1RdUhYNzBsYW9UcWc3SXp2Z0pPbWZDcERvMFZydllPYnlBOHpXKzdhV05sdFZsRk9lMgp3TVJwWUpsR0RhaGZlTVJLQlByVTd5eVNiUDI3YTJ0QVB3UFh2dDhlZVoxaENvV28wdjNnVkl0R2p5bUh0d2lkCnQ0eFhLcUoxaVZMc1hzdXBnWWdjdFU5NWVQZHc4cmh1a05WNWlGZUJoL0hyd1FBUUZVTzgxMHNOS0FmZjN5L20KWndXZnRiamZybWNiNWFEKzBtQmhTYlpUQWdNQkFBR2pnZ0dHTUlJQmdqQjFCZ2dyQmdFRkJRY0JBUVJwTUdjdwpPUVlJS3dZQkJRVUhNQUtHTFdoMGRIQTZMeTl3YTJseWIyOTBMbTExYkhScFkyVnlkQzVqYjIwdlkyVnlkQzl5CmIyOTBNREF4TG1ObGNqQXFCZ2dyQmdFRkJRY3dBWVllYUhSMGNEb3ZMMjlqYzNBdWJYVnNkR2xqWlhKMExtTnYKYlM5dlkzTndNQjBHQTFVZERnUVdCQlJXUjdDWmtmOXV1RTFnelhVajhlVzExK1p5cXpBU0JnTlZIUk1CQWY4RQpDREFHQVFIL0FnRUFNQjhHQTFVZEl3UVlNQmFBRk5VNUhKeGJid1Nxb3BWTTd5RGRLWFNreFVWeE1FTUdBMVVkCklBUThNRG93T0FZTkt3WUJCQUdCdzI0QkFRRUFCekFuTUNVR0NDc0dBUVVGQndJQkZobG9kSFJ3Y3pvdkwzQnIKYVM1dGRXeDBhV05sY25RdVkyOXRNRUVHQTFVZEh3UTZNRGd3TnFBMG9ES0dNR2gwZEhBNkx5OXdhMmx5YjI5MApMbTExYkhScFkyVnlkQzVqYjIwdlkzSnNMM0p2YjNSZmJXTmZZM0pzTG1OeWJEQU9CZ05WSFE4QkFmOEVCQU1DCkFRWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQ0FRQk9hV3RBSHlTaGplVHBCT3c3TTgvLzJHL21ZWVljTWNaMndZUUdLdGUzQkE2MGRDOGR4ZVlxdU5zbAp3cG11Tm5lZ0tpM2dybjdCamI4dzkzaHJiZWp5S2NxRnJGTUM4bi9OeWVQY094TElUNVlTbFdzYXFyVjNNSDNYCkN0VUJSY3YzZ0kvc2dsZkcrK05WVkhjbVNValJhZGdyZHhOOUtobFNQcmpHV2gycmZRd0hhYm9WZUVhZG1TcTcKZzd0ZmQrTGZvV1FRcU02cGFZRzZLamd6QmZueXYwSTlhY1hUa2RkWEprRzNSZ3JVYXFaL2hPMkR1aUw5M2s5LwpxNXE3VUZiVUdtS2h5YkVmTjFWZVN3dGZOd0NucHREN3Eyd3BXeUlQbEcwRnJqZXNkZDg3aTJpbjFJQmlYRllFCkVER0Y5VTM2STVOcmhZOFUxS3Q4OGROKzg5Y21ySWMyZkxJN3J4OWM3aDdISGFmUldpWHBmalBZUGVINm5SVDgKTFFCUEdNNGE3S2dWbUlZYkdXOHhHN200cVBGNjVvTUl2ZkJVL3F4aTZIWW05dEFmV051d3lYUDVodklacTcwMwpsU3lkb0FQem5yQkFqNnF0NW56SFVBeE1VWEk1N0JNTkJRK2dLVUpYRWpXaVZSVU9hNE9URFVRcTJOSTFOWGNvCnJoMld3UEV1WTZyMC92NUVJNlVMeHF1YWJmajFtZEtTTDJFOFdtOTZNZGhRSVFRZ09WdkJsMmVleXpndk1LSGsKbEp6THphYkJHM0g4czZwWnFuaG92YmQybFEwam1kcjlNZUhrWlZkNWthU01xcDU1OU1pUEdCYVk4WUw2TEdPNQp2Wk1FcWxMNnRDUVBSVkJieHd3Rm1yNExYOWN2VHc2blQ0L2F0eXdyMi81ZXRFbFkydz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGOFRDQ0E5bWdBd0lCQWdJSVZFMmx2RUExVmxvd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lVeEN6QUpCZ05WCkJBWVRBbEJVTVVJd1FBWURWUVFLRERsTlZVeFVTVU5GVWxRZ0xTQlRaWEoyYWNPbmIzTWdaR1VnUTJWeWRHbG0KYVdOaHc2ZkRvMjhnUld4bFkzUnl3N051YVdOaElGTXVRUzR4TWpBd0JnTlZCQU1NS1UxVlRGUkpRMFZTVkNCUwpiMjkwSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVJREF4TUI0WERURTBNRFF3TkRBNE5UazBOMW9YCkRUTTVNRFF3TkRBNE5UazBOMW93Z1lVeEN6QUpCZ05WQkFZVEFsQlVNVUl3UUFZRFZRUUtERGxOVlV4VVNVTkYKVWxRZ0xTQlRaWEoyYWNPbmIzTWdaR1VnUTJWeWRHbG1hV05odzZmRG8yOGdSV3hsWTNSeXc3TnVhV05oSUZNdQpRUzR4TWpBd0JnTlZCQU1NS1UxVlRGUkpRMFZTVkNCU2IyOTBJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5CmFYUjVJREF4TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF6dHcvOUJsdXV4VnAKaHZUa3plYzZjRHZIbW9zN2d3Q0JXL3NnRmxxK3YxZ0FYeW5tVjI5K2lpd1ZCMXdhWTR4Q1h4YmQyb21FUlZjWApscUNjb1hVaVFSbzYvY1VYa1JQMnZtSUt2RzRsTFZ2QWpCQm05K0xXKzl4SU1hTWFxT1ZOU01taUhIUCtqMlpBClkzZFpCenc5RkovVTk0V1IwTU5DOVJ0aHMzZUFnQ3B0RWdLV2kxSFp3VzhuQ3hvSE5BRC8wbGxNS2VqWEdXUFkKa2JRLy9JNE9KZktoRWdkbHlqWGVxLzRXb3dpTXIzOStFdlJaRmdVZjZLMTBlVEwzZUFLMnRNeXIyeDQ0WVFRWgpla0ZBMmxvUlpIVUMvV1RSMXBSQ0R5TG5aYzJ2a0E0TVd6RUJtVkh2Ull4OXBUamFubnhMNUtib3M2U0MxZ00wCkxrKzNVYXQzT0FuMUJ2N2NaaHNQUC9wOTc0eFZ2dUFOaHBXaDNMM0V3d2pSUlI3eXZiNXc4ZVlteHJzSXNTaWwKd3FYdGlOYWh3UHNqOFNjNXpPR0VCeG04ZnZiTU9QOXVFTHRHNlNPSkpJSC9BT0pSQU54U1VIMFRVSDBXUFVDTgowNy81aW1YWVloSXBkOEs2d2trMFQ0cDVhY2xMRmZNMDNzK3ZodUxseUtsV1lVd0dWRnJGYkJucTg4aEV6U1FhCmR0RnhBRmxyMlhXYnp2MFEvckdEb3FXM2tvWjJtMHIzSGR5TWhhWllyWXFtYUdrWHlXMGJwczhuU3lrczNYRkMKR29rUTVkV2JFbDlKaTRTODJBaGMrODg0UXErKzBXNTdrYXBtUU1VRmZpdlFacmJIMzFMKzlFVnRJNUlobmhJQgprSE9ENHFVSkRkZkErSVdWSG1QUlB6WGFsTkUzMmZVQ0F3RUFBYU5qTUdFd0hRWURWUjBPQkJZRUZOVTVISnhiCmJ3U3FvcFZNN3lEZEtYU2t4VVZ4TUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SHdZRFZSMGpCQmd3Rm9BVTFUa2MKbkZ0dkJLcWlsVXp2SU4wcGRLVEZSWEV3RGdZRFZSMFBBUUgvQkFRREFnRUdNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElDQVFBLzUxL3pJaGJlZzU0ZzVJTG41WjUzeWZzcnNIUU4zeHQwSWc5ekVLR3dGK3hNRE5Rb2NHcG1ja1JwCkVKTjJOYzh2K0k4OHF4bDhjWktWY1JzM0ZjSWJLSHJ2Ym5nNDMvdVBtd0VnM0svMjFvMEpadHJFUnFuOGxhcEUKSXhMZlI4Q3dGZXkxc1o1c0Q1R3FwanJsd1ExZ2JGQkFjRnhjeU02enpPdnRxb2daVnFXa3lBeDY1WFpBWnpPMApQWmJjZDhzamVQbFRXOCtOM3JHbmpscDZvakpqbzRqWEpXRmFYVWs2Y3ViUHFwU0diRzczZ3VDT1o1TW94YWdOClRlODRyWGxLWm8yRUFRZ0VlZk5TeGtIbm1tSUdzL1VTSHV6WkFFUFQ2NVozZE9GNStSU1VoRzI2VklJRmpOOEIKOGpDSWdheDZMNHRETEhZMHpqWG5oNDVPQ3dxbEdsZXhVMXEvYTlpK0FIN0crZTVtTVFpeDM1UXpoSngzVDN0awpMKytPRDFrb0lzdndYRDRyL1RYV2xmOEQ3R1ZTZnI3eUdmaDcxVklzVW5lYWtXWkJjSTNWU2VjTFNIK0tydDVGClBkMys1dExra3NON3pqQ2dTVzQzcmFqVExMWTluaUhiQmxmaThLNEcrOW5GRVRlaGU5c2RFWHhvZGlBKzlieWwKMldhMUlhMUZKc1pkSGdLalFjVFVmWUVaeXhlWEJnL203SFFBUnNSMTNUM3dRelN2cHJ6ODlvTDd6OFg2c3c4bApwVDltRU5hZWdxWGJPaE41M28ycDE2YU5odEl2MldrTjRuVjRma2xmSXF1R2NDaFJzM3Eyb0huNjFPV0RwN0IzCnl0c0JndS9pdmswdjA4Qk4wT05wYm53bW0rdW0rMFh2c1FTS0w2b2hCdmJtMUx4Qkl3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=";
    private static final String NOT_TINK_QWAC =
            "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdLakNDQlJLZ0F3SUJBZ0lFV2YrZlREQU5CZ2txaGtpRzl3MEJBUXNGQURCRU1Rc3dDUVlEVlFRR0V3SkgKUWpFVU1CSUdBMVVFQ2hNTFQzQmxia0poYm10cGJtY3hIekFkQmdOVkJBTVRGazl3Wlc1Q1lXNXJhVzVuSUVsegpjM1ZwYm1jZ1EwRXdIaGNOTWpBd016STFNVFF5TkRFeFdoY05Nakl3TXpJMU1UUTFOREV4V2pCNk1Rc3dDUVlEClZRUUdFd0pIUWpFdk1DMEdBMVVFQ2hNbVVHRjVVR0ZzSUNoRmRYSnZjR1VwSUZNdVlTQnlMbXd1SUdWMElFTnAKWlNCVExrTXVRUzR4SFRBYkJnTlZCR0VURkZCVFJFeFZMVU5UVTBZdFFqQXdNREF3TXpVeE1Sc3dHUVlEVlFRRApFeEl3TURFMU9EQXdNREF4TUROVlFXdEJRVTB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUNxREkrSjdsZjVaL0srZ2t6YXQweHJYdm5NRHVXRDlqYUVzdGNSUk9CTUtRVFVhUTIwRTFGQm5lUGYKWllnWHFVRHpIamFNamRFZmR3YUxjL2F2bGpCc1lVT094ZFVmR3QySkRuc20zVkJRa0FBTnhONlYzd3ErZEJXbwp0VDJnNkxaeGQwS0FVRGFlQTRRRTBsa1J5dW10Yk8vYnpMOVJCakFVK3BPVG1adFc2eGhrOXpWaVJici9PZjJsClVVdGZCVkFtdnY3dnozQm9yYkdSRDV5aUhYOG0rd1c5cm5DUjZ2SXhiMGFicVJwQ2k1TFcwc25Ba3pPY0M5ODMKOE1CWGRKNnBlOUZadjEyK1NpRTR0QnppTzNqVENoMTFtZFZKQ0k4RVM0U1R6Sm5VZVBHM0J6VHk3b3hXQldpUQpzaExYYzFlTk1rUE9HWnY2eElCd081c2NjQUVSQWdNQkFBR2pnZ0xzTUlJQzZEQU9CZ05WSFE4QkFmOEVCQU1DCkI0QXdhUVlJS3dZQkJRVUhBUU1FWFRCYk1CTUdCZ1FBamtZQkJqQUpCZ2NFQUk1R0FRWURNRVFHQmdRQWdaZ24KQWpBNk1CTXdFUVlIQkFDQm1DY0JBd3dHVUZOUVgwRkpEQnRHYVc1aGJtTnBZV3dnUTI5dVpIVmpkQ0JCZFhSbwpiM0pwZEhrTUJrZENMVVpEUVRBZ0JnTlZIU1VCQWY4RUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3CmdnRlNCZ05WSFNBRWdnRkpNSUlCUlRDQ0FVRUdDeXNHQVFRQnFIV0JCZ0VCTUlJQk1EQTFCZ2dyQmdFRkJRY0MKQVJZcGFIUjBjRG92TDI5aUxuUnlkWE4wYVhNdVkyOXRMM0J5YjJSMVkzUnBiMjR2Y0c5c2FXTnBaWE13Z2ZZRwpDQ3NHQVFVRkJ3SUNNSUhwRElIbVZHaHBjeUJEWlhKMGFXWnBZMkYwWlNCcGN5QnpiMnhsYkhrZ1ptOXlJSFZ6ClpTQjNhWFJvSUU5d1pXNGdRbUZ1YTJsdVp5Qk1hVzFwZEdWa0lHRnVaQ0JoYzNOdlkybGhkR1ZrSUU5d1pXNGcKUW1GdWEybHVaeUJUWlhKMmFXTmxjeTRnU1hSeklISmxZMlZwY0hRc0lIQnZjM05sYzNOcGIyNGdiM0lnZFhObApJR052Ym5OMGFYUjFkR1Z6SUdGalkyVndkR0Z1WTJVZ2IyWWdkR2hsSUU5d1pXNGdRbUZ1YTJsdVp5Qk1hVzFwCmRHVmtJRU5sY25ScFptbGpZWFJsSUZCdmJHbGplU0JoYm1RZ2NtVnNZWFJsWkNCa2IyTjFiV1Z1ZEhNZ2RHaGwKY21WcGJpNHdjZ1lJS3dZQkJRVUhBUUVFWmpCa01DWUdDQ3NHQVFVRkJ6QUJoaHBvZEhSd09pOHZiMkl1ZEhKMQpjM1JwY3k1amIyMHZiMk56Y0RBNkJnZ3JCZ0VGQlFjd0FvWXVhSFIwY0RvdkwyOWlMblJ5ZFhOMGFYTXVZMjl0CkwzQnliMlIxWTNScGIyNHZhWE56ZFdsdVoyTmhMbU55ZERBL0JnTlZIUjhFT0RBMk1EU2dNcUF3aGk1b2RIUncKT2k4dmIySXVkSEoxYzNScGN5NWpiMjB2Y0hKdlpIVmpkR2x2Ymk5cGMzTjFhVzVuWTJFdVkzSnNNQjhHQTFVZApJd1FZTUJhQUZKOUp2MDQycDZ6RER5dklSL1FmS1J2QWVRc0ZNQjBHQTFVZERnUVdCQlJPOHR4S05adFFkUytJCkxEdnB3TmhVcTRiYW5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFyR0lkaWt3SkhEbEMvTDFxcHJFdDc0M3YKUTdndzMyMUxzSDE0eUt2K0F0Z2xlUzR3ZWcxOUNvU2dDOEY5dUtDNlR3UTVINWoyV1RoRGFoT2RhbHh2V3l1eQpjNDYrVklnTnBwNTB0QU84SnUwMzVYLzZVblZUZWNFTFhweUM0VlgvN0RkK2MxNTVRakd2U2NRMmNuMDBTc2lUCnlPSmNHZTVYVEMzR1NuRHZlNGZWUWU2bFFQZmQxMzg1UnF5Q1ptMlN2bStiaXYxRDlVWTN3WG83aTExTW5ubXIKUVU3Rzl4TWwxcGFuVWhQODVwQjJvSjg2RytSUDNBWC9QZ2doUWp3R09pYnVKV3JkYWZqTlhGOWpBSGJha3c2WQpvTTg2WjlYUk9xVmF0bE82UG50Vnp2cTQxNFI5MWpNQ2hvTlQyZXVQVCs0QnFmbVVEcnJzZEovS1c5VENMUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=";

    @Mock private ManagedTppSecretsServiceClient tppSecretsServiceClient;
    @Mock private UnleashClient unleashClient;
    private CertificateIdProvider certificateIdentityService;

    @Before
    public void setUp() throws Exception {
        this.certificateIdentityService =
                new UnleashCertificateIdProvider(tppSecretsServiceClient, unleashClient);
    }

    @Test
    public void shouldReturnUKOBCertIdWhenMarketsCodeIsUK() {
        // given
        String ukMarketCode = "UK";

        // when
        String result =
                certificateIdentityService.getCertId(
                        APP_ID, CLUSTER_ID, PROVIDER_NAME, ukMarketCode, true);

        // then
        assertThat(result).isEqualTo("UKOB");
    }

    @Test
    public void
            shouldReturnOLD_EIDASCertIdWhenCertificatesAreOwnedByTinkAndProviderNameIsAllowed() {
        // given
        when(tppSecretsServiceClient.isEnabled()).thenReturn(true);
        SecretsEntityCore secretEntity = new Builder().setQwac(QWAC).build();
        when(tppSecretsServiceClient.getAllSecrets(APP_ID, CLUSTER_ID, "DEFAULT", PROVIDER_NAME))
                .thenReturn(Optional.of(secretEntity));
        when(unleashClient.isToggleEnable(any())).thenReturn(true);

        // when
        String result =
                certificateIdentityService.getCertId(
                        APP_ID, CLUSTER_ID, PROVIDER_NAME, MARKET_CODE, true);

        // then
        assertThat(result).isEqualTo("OLD_EIDAS");
    }

    @Test
    public void
            shouldReturnDEFAULTCertIdWhenCertificatesAreOwnedByTinkAndProviderNameIsNotAllowed() {
        // given
        when(tppSecretsServiceClient.isEnabled()).thenReturn(true);
        SecretsEntityCore secretEntity = new Builder().setQwac(QWAC).build();
        when(tppSecretsServiceClient.getAllSecrets(APP_ID, CLUSTER_ID, "DEFAULT", PROVIDER_NAME))
                .thenReturn(Optional.of(secretEntity));
        when(unleashClient.isToggleEnable(any())).thenReturn(false);

        // when
        String result =
                certificateIdentityService.getCertId(
                        APP_ID, CLUSTER_ID, PROVIDER_NAME, MARKET_CODE, true);

        // then
        assertThat(result).isEqualTo("DEFAULT");
    }

    @Test
    public void shouldReturnDEFAULTCertIdWhenCertificateIsNotUnderTinkLicense() {
        // given
        when(tppSecretsServiceClient.isEnabled()).thenReturn(true);
        SecretsEntityCore secretEntity = new Builder().setQwac(NOT_TINK_QWAC).build();
        when(tppSecretsServiceClient.getAllSecrets(APP_ID, CLUSTER_ID, "DEFAULT", PROVIDER_NAME))
                .thenReturn(Optional.of(secretEntity));

        // when
        String result =
                certificateIdentityService.getCertId(
                        APP_ID, CLUSTER_ID, PROVIDER_NAME, MARKET_CODE, true);

        // then
        assertThat(result).isEqualTo("DEFAULT");
    }

    @Test
    public void shouldReturnDEFAULTCertIdWhenQwacCertificateDoesNotExistInSecretService() {
        // given
        when(tppSecretsServiceClient.isEnabled()).thenReturn(true);
        SecretsEntityCore secretEntity = new Builder().setQwac("").build();
        when(tppSecretsServiceClient.getAllSecrets(APP_ID, CLUSTER_ID, "DEFAULT", PROVIDER_NAME))
                .thenReturn(Optional.of(secretEntity));

        // when
        String result =
                certificateIdentityService.getCertId(
                        APP_ID, CLUSTER_ID, PROVIDER_NAME, MARKET_CODE, true);

        // then
        assertThat(result).isEqualTo("DEFAULT");
    }

    @Test
    public void shouldReturnDEFAULTCertIdWhenProviderIsNotOpenBanking() {
        // when
        String result =
                certificateIdentityService.getCertId(
                        APP_ID, CLUSTER_ID, PROVIDER_NAME, MARKET_CODE, false);

        // then
        assertThat(result).isEqualTo("DEFAULT");
        verifyZeroInteractions(tppSecretsServiceClient);
    }
}
