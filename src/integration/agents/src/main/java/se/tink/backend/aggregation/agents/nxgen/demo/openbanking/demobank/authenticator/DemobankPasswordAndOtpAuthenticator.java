package se.tink.backend.aggregation.agents.nxgen.demo.openbanking.demobank.authenticator;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import se.tink.backend.agents.rpc.Credentials;
import se.tink.backend.agents.rpc.CredentialsTypes;
import se.tink.backend.agents.rpc.Field;
import se.tink.backend.agents.rpc.Field.Key;
import se.tink.backend.agents.rpc.SelectOption;
import se.tink.backend.aggregation.agents.exceptions.AuthenticationException;
import se.tink.backend.aggregation.agents.exceptions.AuthorizationException;
import se.tink.backend.aggregation.agents.nxgen.demo.openbanking.demobank.DemobankApiClient;
import se.tink.backend.aggregation.agents.nxgen.demo.openbanking.demobank.DemobankConstants;
import se.tink.backend.aggregation.nxgen.controllers.authentication.multifactor.MultiFactorAuthenticator;
import se.tink.backend.aggregation.nxgen.controllers.authentication.utils.OpenBankingTokenExpirationDateHelper;
import se.tink.backend.aggregation.nxgen.controllers.utils.SupplementalInformationController;
import se.tink.backend.aggregation.nxgen.core.authentication.OAuth2Token;

public class DemobankPasswordAndOtpAuthenticator implements MultiFactorAuthenticator {
    private DemobankApiClient apiClient;
    private SupplementalInformationController supplementalInformationController;

    public DemobankPasswordAndOtpAuthenticator(
            DemobankApiClient apiClient,
            SupplementalInformationController supplementalInformationController) {
        this.apiClient = apiClient;
        this.supplementalInformationController = supplementalInformationController;
    }

    @Override
    public void authenticate(Credentials credentials)
            throws AuthenticationException, AuthorizationException {
        String message =
                this.apiClient
                        .initEmbeddedOtp(
                                credentials.getField(Key.USERNAME),
                                credentials.getField(Key.PASSWORD))
                        .getMessage();
        final String otp;
        if ("select".equals(credentials.getField("otpmethod"))) {
            List<SelectOption> selectOptions = new ArrayList<>();

            selectOptions.add(new SelectOption("2FA Code Card Option", "2fa-codecard"));
            selectOptions.add(new SelectOption("2FA Code Application Option", "2fa-codeapp"));
            selectOptions.add(new SelectOption("2FA Code Token Option", "2fa-codetoken"));

            String name = "2fa-option";
            Field field =
                    Field.builder()
                            .description("Available 2ndFA options are: ")
                            .helpText(message)
                            .immutable(true)
                            .masked(false)
                            .name(name)
                            .numeric(true)
                            .selectOptions(selectOptions)
                            .build();

            String choosen2faOption =
                    Optional.ofNullable(
                                    supplementalInformationController
                                            .askSupplementalInformationSync(field)
                                            .get(name))
                            .orElse(" default 2fa");

            otp =
                    supplementalInformationController
                            .askSupplementalInformationSync(
                                    Field.builder()
                                            .description("OTP Code")
                                            .helpText(message + " generated by " + choosen2faOption)
                                            .immutable(true)
                                            .masked(false)
                                            .name("otpinput")
                                            .numeric(true)
                                            .build())
                            .get("otpinput");

        } else {
            otp =
                    supplementalInformationController
                            .askSupplementalInformationSync(
                                    Field.builder()
                                            .description("OTP Code")
                                            .helpText(message)
                                            .immutable(true)
                                            .masked(false)
                                            .name("otpinput")
                                            .numeric(true)
                                            .build())
                            .get("otpinput");
        }

        OAuth2Token token =
                this.apiClient
                        .completeEmbeddedOtp(
                                credentials.getField(Key.USERNAME),
                                credentials.getField(Key.PASSWORD),
                                otp)
                        .toOAuth2Token();

        this.apiClient.setTokenToStorage(token);
        credentials.setSessionExpiryDate(
                OpenBankingTokenExpirationDateHelper.getExpirationDateFrom(
                        token,
                        DemobankConstants.DEFAULT_OB_TOKEN_LIFETIME,
                        DemobankConstants.DEFAULT_OB_TOKEN_LIFETIME_UNIT));
    }

    @Override
    public CredentialsTypes getType() {
        return CredentialsTypes.PASSWORD;
    }
}
