package se.tink.backend.aggregation.agents.nxgen.fi.banks.op.utils;

import java.math.BigInteger;
import org.junit.Assert;
import org.junit.Test;
import se.tink.backend.aggregation.agents.nxgen.fi.banks.op.utils.srp.ClientEvidenceMessageResponse;
import se.tink.backend.aggregation.agents.utils.encoding.EncodingUtils;

public class ActivationUtilsTest {
    // https://integration-proxy.global-production.tink.network/analyze?query=filename%3A%22fi_op%20bank_28.0.1_reg_login_full_hashlogs%22%20AND%20operation%3A%22srp_exchange%22
    private static final String SRP_SESSION_KEY_AS_HEX =
            "104fab0a277b8a2c098f0e30920a4f2a564a1d40647845c662578b957d50adb10d48361d846c84f99d7bd6a26d0e2212b295dce37a11c5ca9baf3a8d7c326009458c4f4482218756cdd06e3d15bbee613695f8ff5fbecb0a6a2c735ecaee1a7708c672a1c8d1068e32ceee0466b3bb90a715e20e1dc5969fd6f61503e6e70d06b409b998ab429d06da6122071d8c1549c8bddc8390ea45b84f2975ae28d93817caede13cf39ac9fa6c01a83655b884b1e266b21d5d8fbad35bb65e0a8690cc020779034d2c95113e529584514cfa9a51e8376a997f8a7ae3e0ee709a1932d881bbc440342b62714066946441ef492a9ad3622e67b332cf15f893497064ed0603";

    @Test
    public void testDecryptActivationMessage1() {
        String encryptedData =
                "AF3B550A55F237E685ECEFCB69BDC275024D4EA01C8B9450D4843DF2B9E839E09390DA54CFD88739A95699E4DB6E6C393CC342037084B8539D217BC67DFF490C0D145987DB07A65BF268E5B9F0F2A44E43B4E4C52C3483DC313126781B7671C8666446BF007AEB85D4B6F50A";
        String encryptionCounter = "0555A77777FA179C";

        ClientEvidenceMessageResponse dummyClientEvidenceMessageResponse =
                new ClientEvidenceMessageResponse(
                        null,
                        null,
                        new BigInteger(EncodingUtils.decodeHexString(SRP_SESSION_KEY_AS_HEX)));

        byte[] decryptedData =
                ActivationUtils.decryptActivationData(
                        dummyClientEvidenceMessageResponse, encryptedData, encryptionCounter);

        String expectedDecryptedData =
                "303030303546444634374141364230303030303030303030303030303030303034443031463242443437313236304334323031413731323642414446363237323637383644384642343945324438324436434230353145353732303838303335363431414346423644413539";

        Assert.assertEquals(
                "Decrypted activationMessage1 was not correct.",
                expectedDecryptedData,
                EncodingUtils.encodeHexAsString(decryptedData));
    }

    @Test
    public void testDecryptStaticVector() {
        String encryptedData =

        String encryptionCounter = "220FB489CA3C6ABD";

        ClientEvidenceMessageResponse dummyClientEvidenceMessageResponse =
                new ClientEvidenceMessageResponse(
                        null,
                        null,
                        new BigInteger(EncodingUtils.decodeHexString(SRP_SESSION_KEY_AS_HEX)));

        byte[] decryptedData =
                ActivationUtils.decryptActivationData(
                        dummyClientEvidenceMessageResponse, encryptedData, encryptionCounter);

        String expectedDecryptedData =


        Assert.assertEquals(
                "Decrypted staticVector was not correct.",
                expectedDecryptedData,
                EncodingUtils.encodeHexAsString(decryptedData));
    }
}
