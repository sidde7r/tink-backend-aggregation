package se.tink.backend.aggregation.agents.nxgen.be.openbanking.argenta.utils;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertThrows;

import org.junit.Test;

public class CertificateValuesProviderTest {

    String base64EncodedCertificate =
            "";

    CertificateValues certificateValues =
            new CertificateValues(
                    "7d4fbf3a6e44f720662dcfce2b6958ac",
                    "CN=MULTICERT Trust Services Certification Authority 005, OU=Certification Authority, O=MULTICERT - Serviços de Certificação Electrónica S.A., C=PT",
                    "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");

    @Test
    public void shouldExtractCertificateValuesFromGivenBase64EncodedCertificate() {
        // when
        CertificateValues actualCertificateValues =
                CertificateValuesProvider.extractCertificateValues(base64EncodedCertificate);
        // then
        assertThat(actualCertificateValues).isEqualToComparingFieldByField(certificateValues);
    }

    @Test
    public void shouldThrowExceptionIfArgumentIsNull() {
        // when
        IllegalArgumentException exception =
                assertThrows(
                        IllegalArgumentException.class,
                        () -> CertificateValuesProvider.extractCertificateValues(null));
        // then
        assertThat(exception.getMessage())
                .isEqualTo("Must provide valid base64-encoded certificates");
    }

    @Test
    public void shouldThrowExceptionIfArgumentIsEmpty() {
        // when
        IllegalArgumentException exception =
                assertThrows(
                        IllegalArgumentException.class,
                        () -> CertificateValuesProvider.extractCertificateValues(""));
        // then
        assertThat(exception.getMessage())
                .isEqualTo("Must provide valid base64-encoded certificates");
    }

    @Test
    public void shouldThrowExceptionIfArgumentIsInvalid() {
        // when
        IllegalArgumentException exception =
                assertThrows(
                        IllegalArgumentException.class,
                        () -> CertificateValuesProvider.extractCertificateValues("fghjkl"));
        // then
        assertThat(exception.getMessage())
                .isEqualTo("Must provide valid base64-encoded certificates");
    }

    //
    //  @Test
    //  public void shouldThrowExceptionIfArgumentIsInvalid() {
    //    // given
    //    String expectedExceptionMessage = "Must provide base64-encoded certificates";
    //    String invalidBase64EncodedCertificates = "invalidBase64EncodedCertificates";
    //
    //    // when
    //    try {
    //      CertificateValuesProvider.extractCertificateValues(invalidBase64EncodedCertificates);
    //
    //    } catch (Exception exception) {
    //      String actualExceptionMessage = exception.getMessage();
    //
    //    // then
    //      assertThat(actualExceptionMessage).isEqualTo(expectedExceptionMessage);
    //    }
    //  }
    //
    //  @Test
    //  public void shouldThrowExceptionIfCannotExtractCertificateValues() {
    //    // given
    //    String expectedExceptionMessage = "";
    //    String base64EncodedCertificates = "";
    ////
    // Mockito.when(CertificateUtils.getX509CertificatesFromBase64EncodedCert(base64EncodedCertificates)).thenReturn();
    //
    //    // when
    //        CertificateValues actualCertificateValues =
    //        CertificateValuesProvider.extractCertificateValues(base64EncodedCertificates);
    //    String actualExceptionMessage = "";
    //
    //    // then
    //    assertThat(actualExceptionMessage).isEqualTo(expectedExceptionMessage);
    //  }
}
