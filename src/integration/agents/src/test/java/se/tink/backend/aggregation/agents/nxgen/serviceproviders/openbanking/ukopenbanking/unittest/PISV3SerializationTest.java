package se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.unittest;

import org.junit.Assert;
import org.junit.Test;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.domestic.DomesticPaymentConsentRequest;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.domestic.DomesticPaymentConsentResponse;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.domestic.DomesticPaymentRequest;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.domestic.DomesticPaymentResponse;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.international.FundsConfirmationResponse;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.international.InternationalPaymentConsentRequest;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.international.InternationalPaymentConsentResponse;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.international.InternationalPaymentRequest;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.openbanking.ukopenbanking.base.pis.rpc.international.InternationalPaymentResponse;
import se.tink.libraries.serialization.utils.SerializationUtils;

public class PISV3SerializationTest {
    // TODO: convert to payment objects

    @Test
    public void serialize_domestic_consent() {
        String request1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"Initiation\": {\n"
                        + "      \"InstructionIdentification\": \"ANSM023\",\n"
                        + "      \"EndToEndIdentification\": \"FRESCO.21302.GFX.37\",\n"
                        + "      \"InstructedAmount\": {\n"
                        + "        \"Amount\": \"20.00\",\n"
                        + "        \"Currency\": \"GBP\"\n"
                        + "      },\n"
                        + "      \"DebtorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"11280001234567\",\n"
                        + "        \"Name\": \"Andrea Smith\"\n"
                        + "      },\n"
                        + "      \"CreditorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"08080021325698\",\n"
                        + "        \"Name\": \"Bob Clements\"\n"
                        + "      },\n"
                        + "      \"RemittanceInformation\": {\n"
                        + "        \"Reference\": \"FRESCO-037\",\n"
                        + "        \"Unstructured\": \"Internal ops code 5120103\"\n"
                        + "      }\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Risk\": {\n"
                        + "    \"PaymentContextCode\": \"PartyToParty\"\n"
                        + "  }\n"
                        + "}";

        DomesticPaymentConsentRequest request2 =
                SerializationUtils.deserializeFromString(
                        request1, DomesticPaymentConsentRequest.class);

        Assert.assertNotNull(request2);

        String response1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"ConsentId\": \"58923\",\n"
                        + "    \"Status\": \"AwaitingAuthorisation\",\n"
                        + "    \"CreationDateTime\": \"2017-06-05T15:15:13+00:00\",\n"
                        + "    \"StatusUpdateDateTime\": \"2017-06-05T15:15:13+00:00\",\n"
                        + "    \"Initiation\": {\n"
                        + "      \"InstructionIdentification\": \"ACME412\",\n"
                        + "      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n"
                        + "      \"InstructedAmount\": {\n"
                        + "        \"Amount\": \"165.88\",\n"
                        + "        \"Currency\": \"GBP\"\n"
                        + "      },\n"
                        + "      \"CreditorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"08080021325698\",\n"
                        + "        \"Name\": \"ACME Inc\",\n"
                        + "        \"SecondaryIdentification\": \"0002\"\n"
                        + "      },\n"
                        + "      \"RemittanceInformation\": {\n"
                        + "        \"Reference\": \"FRESCO-101\",\n"
                        + "        \"Unstructured\": \"Internal ops code 5120101\"\n"
                        + "      }\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Risk\": {\n"
                        + "    \"PaymentContextCode\": \"EcommerceGoods\",\n"
                        + "    \"MerchantCategoryCode\": \"5967\",\n"
                        + "    \"MerchantCustomerIdentification\": \"053598653254\",\n"
                        + "    \"DeliveryAddress\": {\n"
                        + "      \"AddressLine\": [\n"
                        + "        \"Flat 7\",\n"
                        + "        \"Acacia Lodge\"\n"
                        + "      ],\n"
                        + "      \"StreetName\": \"Acacia Avenue\",\n"
                        + "      \"BuildingNumber\": \"27\",\n"
                        + "      \"PostCode\": \"GU31 2ZZ\",\n"
                        + "      \"TownName\": \"Sparsholt\",\n"
                        + "      \"CountySubDivision\": [\n"
                        + "        \"Wessex\"\n"
                        + "      ],\n"
                        + "      \"Country\": \"UK\"\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Links\": {\n"
                        + "    \"Self\": \"https://api.alphabank.com/open-banking/v3.1/pisp/domestic-payment-consents/58923\"\n"
                        + "  },\n"
                        + "  \"Meta\": {}\n"
                        + "}";

        DomesticPaymentConsentResponse response2 =
                SerializationUtils.deserializeFromString(
                        response1, DomesticPaymentConsentResponse.class);

        Assert.assertNotNull(response2);
    }

    @Test
    public void serialize_execute_domestic_payment() {
        String request1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"ConsentId\": \"7290\",\n"
                        + "    \"Initiation\": {\n"
                        + "      \"InstructionIdentification\": \"ANSM023\",\n"
                        + "      \"EndToEndIdentification\": \"FRESCO.21302.GFX.37\",\n"
                        + "      \"InstructedAmount\": {\n"
                        + "        \"Amount\": \"20.00\",\n"
                        + "        \"Currency\": \"GBP\"\n"
                        + "      },\n"
                        + "      \"DebtorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"11280001234567\",\n"
                        + "        \"Name\": \"Andrea Smith\"\n"
                        + "      },\n"
                        + "      \"CreditorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"08080021325698\",\n"
                        + "        \"Name\": \"Bob Clements\"\n"
                        + "      },\n"
                        + "      \"RemittanceInformation\": {\n"
                        + "        \"Reference\": \"FRESCO-037\",\n"
                        + "        \"Unstructured\": \"Internal ops code 5120103\"\n"
                        + "      }\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Risk\": {\n"
                        + "    \"PaymentContextCode\": \"PartyToParty\"\n"
                        + "  }\n"
                        + "}";

        DomesticPaymentRequest request2 =
                SerializationUtils.deserializeFromString(request1, DomesticPaymentRequest.class);

        Assert.assertNotNull(request2);

        String response1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"DomesticPaymentId\": \"7290-003\",\n"
                        + "    \"ConsentId\": \"7290\",\n"
                        + "    \"Status\": \"AcceptedSettlementInProcess\",\n"
                        + "    \"CreationDateTime\": \"2017-06-05T15:15:22+00:00\",\n"
                        + "    \"StatusUpdateDateTime\": \"2017-06-05T15:15:22+00:00\",\n"
                        + "    \"Initiation\": {\n"
                        + "      \"InstructionIdentification\": \"ANSM023\",\n"
                        + "      \"EndToEndIdentification\": \"FRESCO.21302.GFX.37\",\n"
                        + "      \"InstructedAmount\": {\n"
                        + "        \"Amount\": \"20.00\",\n"
                        + "        \"Currency\": \"GBP\"\n"
                        + "      },\n"
                        + "      \"DebtorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"11280001234567\",\n"
                        + "        \"Name\": \"Andrea Smith\"\n"
                        + "      },\n"
                        + "      \"CreditorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"08080021325698\",\n"
                        + "        \"Name\": \"Bob Clements\"\n"
                        + "      },\n"
                        + "      \"RemittanceInformation\": {\n"
                        + "        \"Reference\": \"FRESCO-037\",\n"
                        + "        \"Unstructured\": \"Internal ops code 5120103\"\n"
                        + "      }\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Links\": {\n"
                        + "    \"Self\": \"https://api.alphabank.com/open-banking/v3.1/pisp/domestic-payments/7290-003\"\n"
                        + "  },\n"
                        + "  \"Meta\": {}\n"
                        + "}";

        DomesticPaymentResponse response2 =
                SerializationUtils.deserializeFromString(response1, DomesticPaymentResponse.class);

        Assert.assertNotNull(response2);
    }

    @Test
    public void serialize_funds_confirmation() {
        String response1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"FundsAvailableResult\": {\n"
                        + "      \"FundsAvailableDateTime\": \"2019-05-14T14:12:23.962Z\",\n"
                        + "      \"FundsAvailable\": true\n"
                        + "    },\n"
                        + "    \"SupplementaryData\": {}\n"
                        + "  },\n"
                        + "  \"Links\": {\n"
                        + "    \"Self\": \"string\",\n"
                        + "    \"First\": \"string\",\n"
                        + "    \"Prev\": \"string\",\n"
                        + "    \"Next\": \"string\",\n"
                        + "    \"Last\": \"string\"\n"
                        + "  },\n"
                        + "  \"Meta\": {\n"
                        + "    \"TotalPages\": 0,\n"
                        + "    \"FirstAvailableDateTime\": \"2019-05-14T14:12:23.962Z\",\n"
                        + "    \"LastAvailableDateTime\": \"2019-05-14T14:12:23.962Z\"\n"
                        + "  }\n"
                        + "}";

        FundsConfirmationResponse response2 =
                SerializationUtils.deserializeFromString(
                        response1, FundsConfirmationResponse.class);

        Assert.assertNotNull(response2);
    }

    @Test
    public void serialize_international_consent() {
        String request1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"Initiation\": {\n"
                        + "      \"InstructionIdentification\": \"ACME412\",\n"
                        + "      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n"
                        + "      \"InstructionPriority\": \"Normal\",\n"
                        + "      \"CurrencyOfTransfer\":\"USD\",\n"
                        + "      \"InstructedAmount\": {\n"
                        + "        \"Amount\": {\n"
                        + "           \"Amount\": \"165.88\",\n"
                        + "           \"Currency\": \"GBP\"\n"
                        + "         }\n"
                        + "      },\n"
                        + "      \"CreditorAccount\": {\n"
                        + "        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "        \"Identification\": \"08080021325698\",\n"
                        + "        \"Name\": \"ACME Inc\",\n"
                        + "        \"SecondaryIdentification\": \"0002\"\n"
                        + "      },\n"
                        + "      \"RemittanceInformation\": {\n"
                        + "        \"Reference\": \"FRESCO-101\",\n"
                        + "        \"Unstructured\": \"Internal ops code 5120101\"\n"
                        + "      },\n"
                        + "      \"ExchangeRateInformation\": {\n"
                        + "        \"UnitCurrency\": \"GBP\",\n"
                        + "        \"RateType\": \"Actual\"\n"
                        + "      }\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Risk\": {\n"
                        + "    \"PaymentContextCode\": \"PartyToParty\"\n"
                        + "  }\n"
                        + "}";

        InternationalPaymentConsentRequest request2 =
                SerializationUtils.deserializeFromString(
                        request1, InternationalPaymentConsentRequest.class);

        Assert.assertNotNull(request2);

        String response1 =
                "{\n"
                        + "    \"Data\": {\n"
                        + "        \"ConsentId\": \"58923\",\n"
                        + "        \"Status\": \"AwaitingAuthorisation\",\n"
                        + "        \"CutOffDateTime\": \"2017-06-05T16:00:13+00:00\",\n"
                        + "        \"CreationDateTime\": \"2017-06-05T15:15:13+00:00\",\n"
                        + "        \"StatusUpdateDateTime\": \"2017-06-05T15:15:13+00:00\",\n"
                        + "        \"Initiation\": {\n"
                        + "            \"InstructionIdentification\": \"ACME412\",\n"
                        + "            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n"
                        + "            \"InstructionPriority\": \"Normal\",\n"
                        + "            \"CurrencyOfTransfer\":\"USD\",\n"
                        + "            \"InstructedAmount\": {\n"
                        + "                \"Amount\": \"165.88\",\n"
                        + "                \"Currency\": \"GBP\"\n"
                        + "            },         \n"
                        + "            \"CreditorAccount\": {\n"
                        + "                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n"
                        + "                \"Identification\": \"08080021325698\",\n"
                        + "                \"Name\": \"ACME Inc\",\n"
                        + "                \"SecondaryIdentification\": \"0002\"\n"
                        + "            },\n"
                        + "            \"RemittanceInformation\": {\n"
                        + "                \"Reference\": \"FRESCO-101\",\n"
                        + "                \"Unstructured\": \"Internal ops code 5120101\"\n"
                        + "            },\n"
                        + "            \"ExchangeRateInformation\": {\n"
                        + "                \"UnitCurrency\": \"GBP\",\n"
                        + "                \"RateType\": \"Actual\"\n"
                        + "            }\n"
                        + "        },\n"
                        + "        \"ExchangeRateInformation\": {\n"
                        + "            \"UnitCurrency\": \"GBP\",\n"
                        + "            \"ExchangeRate\": \"1.10\",\n"
                        + "            \"RateType\": \"Actual\",\n"
                        + "            \"ExpirationDateTime\": \"2017-06-05T15:45:13+00:00\"\n"
                        + "        }\n"
                        + "    },\n"
                        + "    \"Risk\": {\n"
                        + "        \"PaymentContextCode\": \"PartyToParty\"\n"
                        + " \n"
                        + "    },\n"
                        + "    \"Links\": {\n"
                        + "        \"Self\": \"https://api.alphabank.com/open-banking/v3.1/pisp/international-payment-consents/58923\"\n"
                        + "    },\n"
                        + "    \"Meta\": {}\n"
                        + "}";

        InternationalPaymentConsentResponse response2 =
                SerializationUtils.deserializeFromString(
                        response1, InternationalPaymentConsentResponse.class);

        Assert.assertNotNull(response2);
    }

    @Test
    public void serialize_execute_international_payment() {
        String request1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"ConsentId\": \"string\",\n"
                        + "    \"Initiation\": {\n"
                        + "      \"InstructionIdentification\": \"string\",\n"
                        + "      \"EndToEndIdentification\": \"string\",\n"
                        + "      \"InstructionPriority\": \"Normal\",\n"
                        + "      \"Purpose\": \"string\",\n"
                        + "      \"ChargeBearer\": \"BorneByCreditor\",\n"
                        + "      \"CurrencyOfTransfer\": \"string\",\n"
                        + "      \"InstructedAmount\": {\n"
                        + "        \"Amount\": \"string\",\n"
                        + "        \"Currency\": \"string\"\n"
                        + "      },\n"
                        + "      \"ExchangeRateInformation\": {\n"
                        + "        \"UnitCurrency\": \"string\",\n"
                        + "        \"ExchangeRate\": 0,\n"
                        + "        \"RateType\": \"Actual\",\n"
                        + "        \"ContractIdentification\": \"string\"\n"
                        + "      },\n"
                        + "      \"DebtorAccount\": {\n"
                        + "        \"SchemeName\": \n"
                        + "          \"UK.OBIE.SortCodeAccountNumber\"\n"
                        + "        ,\n"
                        + "        \"Identification\": \"string\",\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"SecondaryIdentification\": \"string\"\n"
                        + "      },\n"
                        + "      \"Creditor\": {\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"PostalAddress\": {\n"
                        + "          \"AddressType\": \"Business\",\n"
                        + "          \"Department\": \"string\",\n"
                        + "          \"SubDepartment\": \"string\",\n"
                        + "          \"StreetName\": \"string\",\n"
                        + "          \"BuildingNumber\": \"string\",\n"
                        + "          \"PostCode\": \"string\",\n"
                        + "          \"TownName\": \"string\",\n"
                        + "          \"CountrySubDivision\": \"string\",\n"
                        + "          \"Country\": \"string\",\n"
                        + "          \"AddressLine\": [\n"
                        + "            \"string\"\n"
                        + "          ]\n"
                        + "        }\n"
                        + "      },\n"
                        + "      \"CreditorAgent\": {\n"
                        + "        \"SchemeName\": [\n"
                        + "          \"UK.OBIE.BICFI\"\n"
                        + "        ],\n"
                        + "        \"Identification\": \"string\",\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"PostalAddress\": {\n"
                        + "          \"AddressType\": \"Business\",\n"
                        + "          \"Department\": \"string\",\n"
                        + "          \"SubDepartment\": \"string\",\n"
                        + "          \"StreetName\": \"string\",\n"
                        + "          \"BuildingNumber\": \"string\",\n"
                        + "          \"PostCode\": \"string\",\n"
                        + "          \"TownName\": \"string\",\n"
                        + "          \"CountrySubDivision\": \"string\",\n"
                        + "          \"Country\": \"string\",\n"
                        + "          \"AddressLine\": [\n"
                        + "            \"string\"\n"
                        + "          ]\n"
                        + "        }\n"
                        + "      },\n"
                        + "      \"CreditorAccount\": {\n"
                        + "        \"SchemeName\":"
                        + "          \"UK.OBIE.SortCodeAccountNumber\"\n"
                        + "        ,\n"
                        + "        \"Identification\": \"string\",\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"SecondaryIdentification\": \"string\"\n"
                        + "      },\n"
                        + "      \"RemittanceInformation\": {\n"
                        + "        \"Unstructured\": \"string\",\n"
                        + "        \"Reference\": \"string\"\n"
                        + "      },\n"
                        + "      \"SupplementaryData\": {}\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Risk\": {\n"
                        + "    \"PaymentContextCode\": \"BillPayment\",\n"
                        + "    \"MerchantCategoryCode\": \"string\",\n"
                        + "    \"MerchantCustomerIdentification\": \"string\",\n"
                        + "    \"DeliveryAddress\": {\n"
                        + "      \"AddressLine\": [\n"
                        + "        \"string\"\n"
                        + "      ],\n"
                        + "      \"StreetName\": \"string\",\n"
                        + "      \"BuildingNumber\": \"string\",\n"
                        + "      \"PostCode\": \"string\",\n"
                        + "      \"TownName\": \"string\",\n"
                        + "      \"CountrySubDivision\": [\n"
                        + "        \"string\"\n"
                        + "      ],\n"
                        + "      \"Country\": \"string\"\n"
                        + "    }\n"
                        + "  }\n"
                        + "}";

        InternationalPaymentRequest request2 =
                SerializationUtils.deserializeFromString(
                        request1, InternationalPaymentRequest.class);
        Assert.assertNotNull(request2);

        String response1 =
                "{\n"
                        + "  \"Data\": {\n"
                        + "    \"InternationalPaymentId\": \"string\",\n"
                        + "    \"ConsentId\": \"string\",\n"
                        + "    \"CreationDateTime\": \"2019-05-16T13:17:42.136Z\",\n"
                        + "    \"Status\": \"AcceptedSettlementCompleted\",\n"
                        + "    \"StatusUpdateDateTime\": \"2019-05-16T13:17:42.136Z\",\n"
                        + "    \"ExpectedExecutionDateTime\": \"2019-05-16T13:17:42.136Z\",\n"
                        + "    \"ExpectedSettlementDateTime\": \"2019-05-16T13:17:42.136Z\",\n"
                        + "    \"Charges\": [\n"
                        + "      {\n"
                        + "        \"ChargeBearer\": \"BorneByCreditor\",\n"
                        + "        \"Type\": [\n"
                        + "          \"UK.OBIE.CHAPSOut\"\n"
                        + "        ],\n"
                        + "        \"Amount\": {\n"
                        + "          \"Amount\": \"string\",\n"
                        + "          \"Currency\": \"string\"\n"
                        + "        }\n"
                        + "      }\n"
                        + "    ],\n"
                        + "    \"ExchangeRateInformation\": {\n"
                        + "      \"UnitCurrency\": \"string\",\n"
                        + "      \"ExchangeRate\": 0,\n"
                        + "      \"RateType\": \"Actual\",\n"
                        + "      \"ContractIdentification\": \"string\",\n"
                        + "      \"ExpirationDateTime\": \"2019-05-16T13:17:42.137Z\"\n"
                        + "    },\n"
                        + "    \"Initiation\": {\n"
                        + "      \"InstructionIdentification\": \"string\",\n"
                        + "      \"EndToEndIdentification\": \"string\",\n"
                        + "      \"LocalInstrument\": "
                        + "        \"UK.OBIE.BACS\",\n"
                        + "      \"InstructionPriority\": \"Normal\",\n"
                        + "      \"Purpose\": \"string\",\n"
                        + "      \"ChargeBearer\": \"BorneByCreditor\",\n"
                        + "      \"CurrencyOfTransfer\": \"string\",\n"
                        + "      \"InstructedAmount\": {\n"
                        + "        \"Amount\": \"string\",\n"
                        + "        \"Currency\": \"string\"\n"
                        + "      },\n"
                        + "      \"ExchangeRateInformation\": {\n"
                        + "        \"UnitCurrency\": \"string\",\n"
                        + "        \"ExchangeRate\": 0,\n"
                        + "        \"RateType\": \"Actual\",\n"
                        + "        \"ContractIdentification\": \"string\"\n"
                        + "      },\n"
                        + "      \"DebtorAccount\": {\n"
                        + "        \"SchemeName\":"
                        + "          \"UK.OBIE.BBAN\",\n"
                        + "        \"Identification\": \"string\",\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"SecondaryIdentification\": \"string\"\n"
                        + "      },\n"
                        + "      \"Creditor\": {\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"PostalAddress\": {\n"
                        + "          \"AddressType\": \"Business\",\n"
                        + "          \"Department\": \"string\",\n"
                        + "          \"SubDepartment\": \"string\",\n"
                        + "          \"StreetName\": \"string\",\n"
                        + "          \"BuildingNumber\": \"string\",\n"
                        + "          \"PostCode\": \"string\",\n"
                        + "          \"TownName\": \"string\",\n"
                        + "          \"CountrySubDivision\": \"string\",\n"
                        + "          \"Country\": \"string\",\n"
                        + "          \"AddressLine\": [\n"
                        + "            \"string\"\n"
                        + "          ]\n"
                        + "        }\n"
                        + "      },\n"
                        + "      \"CreditorAgent\": {\n"
                        + "        \"SchemeName\": "
                        + "          \"UK.OBIE.BICFI\"\n"
                        + "        ,\n"
                        + "        \"Identification\": \"string\",\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"PostalAddress\": {\n"
                        + "          \"AddressType\": \"Business\",\n"
                        + "          \"Department\": \"string\",\n"
                        + "          \"SubDepartment\": \"string\",\n"
                        + "          \"StreetName\": \"string\",\n"
                        + "          \"BuildingNumber\": \"string\",\n"
                        + "          \"PostCode\": \"string\",\n"
                        + "          \"TownName\": \"string\",\n"
                        + "          \"CountrySubDivision\": \"string\",\n"
                        + "          \"Country\": \"string\",\n"
                        + "          \"AddressLine\": [\n"
                        + "            \"string\"\n"
                        + "          ]\n"
                        + "        }\n"
                        + "      },\n"
                        + "      \"CreditorAccount\": {\n"
                        + "        \"SchemeName\": \n"
                        + "          \"UK.OBIE.BBAN\",\n"
                        + "        \"Identification\": \"string\",\n"
                        + "        \"Name\": \"string\",\n"
                        + "        \"SecondaryIdentification\": \"string\"\n"
                        + "      },\n"
                        + "      \"RemittanceInformation\": {\n"
                        + "        \"Unstructured\": \"string\",\n"
                        + "        \"Reference\": \"string\"\n"
                        + "      },\n"
                        + "      \"SupplementaryData\": {}\n"
                        + "    },\n"
                        + "    \"MultiAuthorisation\": {\n"
                        + "      \"Status\": \"Authorised\",\n"
                        + "      \"NumberRequired\": 0,\n"
                        + "      \"NumberReceived\": 0,\n"
                        + "      \"LastUpdateDateTime\": \"2019-05-16T13:17:42.137Z\",\n"
                        + "      \"ExpirationDateTime\": \"2019-05-16T13:17:42.137Z\"\n"
                        + "    }\n"
                        + "  },\n"
                        + "  \"Links\": {\n"
                        + "    \"Self\": \"string\",\n"
                        + "    \"First\": \"string\",\n"
                        + "    \"Prev\": \"string\",\n"
                        + "    \"Next\": \"string\",\n"
                        + "    \"Last\": \"string\"\n"
                        + "  },\n"
                        + "  \"Meta\": {\n"
                        + "    \"TotalPages\": 0,\n"
                        + "    \"FirstAvailableDateTime\": \"2019-05-16T13:17:42.137Z\",\n"
                        + "    \"LastAvailableDateTime\": \"2019-05-16T13:17:42.137Z\"\n"
                        + "  }\n"
                        + "}";

        InternationalPaymentResponse response2 =
                SerializationUtils.deserializeFromString(
                        response1, InternationalPaymentResponse.class);

        Assert.assertNotNull(response2);
    }
}
