syntax = "proto3";

option java_multiple_files = true;
option java_package = "se.tink.backend.secretservice.grpc";
option java_outer_classname = "Protos";
option go_package = "proto";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

service InternalCertificateService {
    rpc GetQwacCertificateWithEncryptedPrivateKey (QwacCertificateRequest) returns (CertificateResponse) {}
    rpc GetQsealcCertificateWithEncryptedPrivateKey (QsealcCertificateRequest) returns (CertificateResponse) {}
    rpc Ping(PingMessage) returns (PingMessage) {}
}

service ExternalCertificateService {
    rpc GetUploadKey (PublicKeyRequest) returns (PublicKeyResponse) {}
    rpc GenerateCsrAndEncryptPrivateKey (GenerateCsrAndEncryptPrivateKeyRequest) returns (GenerateCsrAndEncryptPrivateKeyResponse) {}
    rpc ConvertEncryptedPrivateKey (ConvertEncryptedPrivateKeyRequest) returns (ConvertEncryptedPrivateKeyResponse) {}
    rpc RewrapEncryptedPrivateKey (RewrapEncryptedPrivateKeyRequest) returns (RewrapEncryptedPrivateKeyResponse) {}
    rpc DeleteAesKey (DeleteAesKeyRequest) returns (google.protobuf.Empty){}
    rpc InvalidateCachedCertificate (InvalidateCachedCertificateRequest) returns (google.protobuf.Empty){}
    rpc Sign (SignRequest) returns (SignResponse){}
    rpc Ping(PingMessage) returns (PingMessage) {}
}

service InternalSecretsService {
    rpc GetAllSecrets (GetSecretsRequest) returns (GetAllSecretsResponse) {}
    rpc GetLicenseModel (GetLicenseModelRequest) returns (GetLicenseModelResponse) {}
    rpc Ping (PingMessage) returns (PingMessage) {}
}

service ExternalSecretsService {
    rpc GetUploadKey (PublicKeyRequest) returns (PublicKeyResponse) {}
    rpc InvalidateCachedSecrets (InvalidateCachedSecretsRequest) returns (InvalidateCachedSecretsResponse) {}
}

service ExternalRegistrationService{
    rpc GetEnrollmentInformation (GetEnrollmentInformationRequest) returns (GetEnrollmentInformationResponse);
    rpc Enroll (EnrollmentRequest) returns (EnrollmentResponse);
}

enum CertType {
    QWAC = 0;
    QSEALC = 1;
}

enum RegulatoryZone {
    regulatoryZoneUnknown = 0;
    EU = 1;
    UK = 2;
}

enum SigningAlgorithm {
    UNKNOWN_ALG = 0;
    EIDAS_RSA_SHA256 = 1;
    EIDAS_PSS_SHA256 = 2;
    EIDAS_DOC_RSA_SHA256 = 5;
}

message TppSecret {
    string key = 1;
    string value = 2;
}

message EncryptedTppSecret {
    string key = 1;
    string value = 2;
}

message InvalidateCachedSecretsRequest {
    string appId = 1;
    reserved 2;
    string clusterId = 3;
    string certId = 4;
    string providerId = 5;
}

message InvalidateCachedSecretsResponse {}

message GetSecretsRequest {
    string appId = 1;
    reserved 2;
    string clusterId = 3;
    string certId = 4;
    string providerId = 5;
}

message GetAllSecretsResponse {
    repeated TppSecret secrets = 1;
    repeated TppSecret encryptedSecrets = 2;
    repeated string redirectUrls = 3;
    repeated string scopes = 4;
    PlainCertificateEntity certificates = 5;
}

message GetLicenseModelRequest {
    string appId = 1;
    string clusterId = 2;
    string providerId = 3;
}

message GetLicenseModelResponse {
    string licenseModel = 1;
}

message PlainCertificateEntity {
    string qwac = 1;
    string qsealc = 2;
}

message QwacCertificateRequest {
    string appId = 1;
    string certId = 2;
    string clusterId = 3;
    string providerId = 4;
}

message CertificateResponse {
    bytes certificate = 1;
    bytes privateKeyInPlaintext = 2;
    string encryptedPrivateKey = 3;
    string resolvedAppId = 4;
}

message QsealcCertificateRequest {
    string appId = 1;
    string certId = 2;
    string clusterId = 3;
    string providerId = 4;
}

message InvalidateCachedCertificateRequest{
    string appId = 1;
    string certId = 2;
    CertType certType = 3;
    string clusterId = 4;
    RegulatoryZone regulatoryZone = 5;
}

message PublicKeyRequest {}

message PublicKeyResponse {
    string publicKey = 1;
}

message GenerateCsrAndEncryptPrivateKeyRequest {
    string appId = 1;
    CertType certType = 2;
    string certId = 3;
    RegulatoryZone regulatoryZone = 4;
    string csrConfJson = 5;
}

message GenerateCsrAndEncryptPrivateKeyResponse {
    string csr = 1;
    string encryptedPrivateKey = 2;
    string csrSignature = 3;
}

message SignWithEncryptedQsealcRequest {
    string appId = 1;
    string certId = 2;
    bytes dataToSign = 3;
    bytes encryptedPrivateKey = 4;
    string algorithm = 5;
}

message ConvertEncryptedPrivateKeyRequest {
    string appId = 1;
    string certId = 2;
    CertType certType = 3;
    string encryptedPrivateKey = 4;
    string uploadKey = 5;
}

message ConvertEncryptedPrivateKeyResponse {
    string encryptedPrivateKey = 1;
}

message RewrapEncryptedPrivateKeyRequest {
    string appId = 1;
    CertType certType = 2;
    string oldCertId = 3;
    string encryptedPrivateKey = 4;
    string newCertId = 5;
}

message RewrapEncryptedPrivateKeyResponse {
    string rewrappedEncryptedPrivateKey = 1;
}

message DeleteAesKeyRequest {
    string appId = 1;
    string certId = 2;
    CertType certType = 3;
}

message PingMessage {
}

message GetEnrollmentInformationRequest {
    string providerId = 1;
    string clusterId = 2;
}

message GetEnrollmentInformationResponse {
    repeated string providerIds = 1;
    string guide = 2;
    bool isDynamicEnrollmentPossible = 3;
    google.protobuf.Struct enrollmentInputsSchema = 4;
}

message EnrollmentRequest {
    string appId = 1;
    string certId = 2;
    string providerId = 3;
    string enrollmentInputs = 4;
    string clusterId = 5;
    PlainCertificateEntity certificates = 6;
    repeated string redirectUrls = 7;
}

message EnrollmentResponse {
    map<string, string> secrets = 1;
    map<string, string> encryptedSecrets = 2;
    repeated string providerIds = 3;
    string publicKey = 4;
}

message SignRequest{
    string appId = 1;
    string clusterId = 2;
    RegulatoryZone regulatoryZone = 3;
    SigningAlgorithm signingAlgorithm = 4;
    bytes data = 5;
}

message SignResponse{
    bytes signature = 1;
}
