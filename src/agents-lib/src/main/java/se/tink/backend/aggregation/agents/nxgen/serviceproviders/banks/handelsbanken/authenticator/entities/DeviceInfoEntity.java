package se.tink.backend.aggregation.agents.nxgen.serviceproviders.banks.handelsbanken.authenticator.entities;

import com.google.common.collect.Lists;
import java.util.List;
import se.tink.backend.aggregation.agents.nxgen.serviceproviders.banks.handelsbanken.HandelsbankenConstants;
import se.tink.backend.aggregation.annotations.JsonObject;

@JsonObject
public class DeviceInfoEntity {

    private List<DeviceInfoKeyValue> data;

    public DeviceInfoEntity(String deviceSecurityContextId) {
        this.data = Lists.newArrayList(HandelsbankenConstants.Authentication.DEVICE_INFO_DATA); // 1

        // Device Security Context Id. Must be the same as in the initNewProfile request.
        this.data.add(new DeviceInfoKeyValue("dsc", deviceSecurityContextId));
        this.data.add(new DeviceInfoKeyValue("i_bt", createBt()));
        this.data.add(new DeviceInfoKeyValue("i_ifv", createIfv()));
    }

    // `i_bt` == ios back trace
    // AES/CBC encrypted with random key and iv (which are NOT sent to the server).
    // This value is most likely generated by the obfuscation library.
    // Caution: The key and IV might be sent to the server in the future.
    private String createBt() {
        byte[] bt = new byte[1552];
        HandelsbankenConstants.RANDOM.nextBytes(bt);
        return HandelsbankenConstants.BASE64_CODEC.encodeAsString(bt);
    }

    // `i_ifv` == ios id for vendor
    // Identification for the device and application. Unique per installation.
    private String createIfv() {
        byte[] ifv = new byte[16];
        HandelsbankenConstants.RANDOM.nextBytes(ifv);
        return HandelsbankenConstants.BASE64_CODEC.encodeAsString(ifv);
    }
}
