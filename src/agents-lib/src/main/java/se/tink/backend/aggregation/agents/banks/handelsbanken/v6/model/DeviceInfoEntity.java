package se.tink.backend.aggregation.agents.banks.handelsbanken.v6.model;

import com.google.common.collect.Lists;
import java.security.SecureRandom;
import java.util.List;
import org.apache.commons.codec.binary.Base64;

public class DeviceInfoEntity {
    public class DeviceInfoKeyValue {
        private String key;
        private String value;

        public DeviceInfoKeyValue(String key, String value) {
            this.key = key;
            this.value = value;
        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }

    private List<DeviceInfoKeyValue> data = Lists.newArrayList();
    private static final SecureRandom RANDOM = new SecureRandom();
    private static final Base64 BASE64_CODEC = new Base64();

    public DeviceInfoEntity(String deviceSecurityContextId) {
        byte[] ifv = new byte[16];
        RANDOM.nextBytes(ifv);

        byte[] bt = new byte[1552];
        RANDOM.nextBytes(bt);

        data.add(new DeviceInfoKeyValue("app_version", "Ny40LjA=")); // 7.4.0
        data.add(new DeviceInfoKeyValue("comp_ver", "Mg==")); // 2

        // Device Security Context Id. Must be the same as in the initNewProfile request.
        data.add(new DeviceInfoKeyValue("dsc", deviceSecurityContextId));

        // `i_bt` == ios back trace
        // AES/CBC encrypted with random key and iv (which are NOT sent to the server).
        // This value is most likely generated by the obfuscation library.
        // Caution: The key and IV might be sent to the server in the future.
        data.add(new DeviceInfoKeyValue("i_bt", BASE64_CODEC.encodeAsString(bt)));

        // `i_ifv` == ios id for vendor
        // Identification for the device and application. Unique per installation.
        data.add(new DeviceInfoKeyValue("i_ifv", BASE64_CODEC.encodeAsString(ifv)));

        // Jailbreak detection. Set manually to `0` in order to not set off any alarms (as of today it is OK to have
        // these set to `1`).
        data.add(new DeviceInfoKeyValue("i_jbd_001", "MA==")); // 0
        data.add(new DeviceInfoKeyValue("i_jbd_002", "MA==")); // 0
        data.add(new DeviceInfoKeyValue("i_jbd_101", "MA==")); // 0

        data.add(new DeviceInfoKeyValue("i_model", "aVBob25l")); // iPhone

        // This value looks to be static, could be application version specific.
        data.add(new DeviceInfoKeyValue("i_sid", "sHM+0eLKRWSeFaeFxqKArA=="));
        data.add(new DeviceInfoKeyValue("i_sid_f", "MA==")); // 0

        data.add(new DeviceInfoKeyValue("os_name", "aU9T")); // iOS
        data.add(new DeviceInfoKeyValue("os_version", "MTAuMS4x")); // 10.1.1
        data.add(new DeviceInfoKeyValue("prof_trans_ver", "MQ==")); // 1
    }

    public List<DeviceInfoKeyValue> getData() {
        return data;
    }

    public void setData(List<DeviceInfoKeyValue> data) {
        this.data = data;
    }
}
